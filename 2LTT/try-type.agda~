{-# OPTIONS --without-K  --two-level --cumulativity #-}

module 2LTT.try-type where

open import 2LTT.Exotypes

data RoseTree {l1 : Level}(A : UUᵉ l1) : UUᵉ l1  where
  rosenode : A → Listᵉ (RoseTree A) → RoseTree A


finite-branched-tree : {l1 : Level}{A : UUᵉ l1} → ℕᵉ → A → RoseTree A
finite-branched-tree zeroᵉ a = rosenode a nilᵉ
finite-branched-tree (succᵉ zeroᵉ) a = rosenode a (consᵉ {!!} {!!})
finite-branched-tree (succᵉ (succᵉ n)) a = {!!}


data List' {l1 : Level}(A : UUᵉ l1) : UUᵉ l1 where
  nil' : List' A
  cons' : A → List' A → List' A
  append : List' A → List' A → List' A


postulate
  append-nil : {l1 : Level} {A : UUᵉ l1} → nil' {l1} {A} =ᵉ append nil' nil'
  append-cons :  {l1 : Level} {A : UUᵉ l1} {a : A} {l l' : List' {l1} A} → cons' a (append l l') =ᵉ append (cons' a l) (l')


dd : {l1 : Level} {A : UUᵉ l1} → Listᵉ A → List' A
dd nilᵉ = nil'
dd (consᵉ x l) = cons' x (dd l)

aux-dd : {l1 : Level}{A : UUᵉ l1} → (l l' : Listᵉ A) → dd (list-appendᵉ l l') =ᵉ append (dd l) (dd l')
aux-dd nilᵉ l' = {!!}
aux-dd (consᵉ x l) l' = {!!}

ee : {l1 : Level}{A : UUᵉ l1} → List' A → Listᵉ A
ee nil' = nilᵉ
ee (cons' x l) = consᵉ x (ee l)
ee (append l l') = list-appendᵉ (ee l) (ee l')

ddee : {l1 : Level}{A : UUᵉ l1} → (l : List' A) → dd (ee l) =ᵉ l
ddee nil' = reflᵉ
ddee (cons' x l) = exo-ap (cons' x) (ddee l)
ddee (append l l₁) = {!!}

